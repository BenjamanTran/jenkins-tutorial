---
# Deploy application to local server (idempotent, minimal operations)
- hosts: local
  become: no
  gather_facts: no
  vars:
    release_date: "{{ lookup('env','RELEASE_DATE') }}"
    deploy_dir: "{{ lookup('env','WORKSPACE') }}/deploy"
    keep_releases: "{{ lookup('env','KEEP_RELEASES') | default(5) }}"
    source_dir: "{{ source_dir | default('') }}"
  environment:
    PYTHONPATH: ""

  tasks:
    # Ensure deployment directory structure exists
    - name: Create deployment directory
      raw: mkdir -p "{{ deploy_dir }}" && chmod 755 "{{ deploy_dir }}"

    - name: Create release directory
      raw: mkdir -p "{{ deploy_dir }}/{{ release_date }}" && chmod 755 "{{ deploy_dir }}/{{ release_date }}"

    # Copy site assets from source_dir (repo) into the new release
    - name: Resolve source_dir default
      set_fact:
        source_dir: "{{ lookup('env','WORKSPACE') }}/source"
      when: source_dir | length == 0

    - name: Copy site assets to release (fast rsync, filtered)
      synchronize:
        src: "{{ source_dir }}/"
        dest: "{{ deploy_dir }}/{{ release_date }}/"
        recursive: yes
        delete: no
        rsync_opts:
          - "--relative"
          - "--prune-empty-dirs"
          - "--include=*/"
          - "--include=index.html"
          - "--include=404.html"
          - "--include=css/***"
          - "--include=js/***"
          - "--include=images/***"
          - "--include=img/***"
          - "--include=assets/***"
          - "--include=static/***"
          - "--exclude=*"
      register: copy_result
      ignore_errors: yes

    # Ensure local nginx content directory exists (volume-mounted in docker-compose)
    - name: Ensure nginx directory exists
      raw: |
        mkdir -p {{ lookup('env','WORKSPACE') }}/html/jenkins/tanttws2/
        chmod 755 {{ lookup('env','WORKSPACE') }}/html/jenkins/tanttws2/

    # Copy site assets to nginx directory (single source of truth)
    - name: Copy site assets to nginx directory (fast rsync, filtered)
      synchronize:
        src: "{{ source_dir }}/"
        dest: "{{ lookup('env','WORKSPACE') }}/html/jenkins/tanttws2/"
        recursive: yes
        delete: no
        rsync_opts:
          - "--relative"
          - "--prune-empty-dirs"
          - "--include=*/"
          - "--include=index.html"
          - "--include=404.html"
          - "--include=css/***"
          - "--include=js/***"
          - "--include=images/***"
          - "--include=img/***"
          - "--include=assets/***"
          - "--include=static/***"
          - "--exclude=*"
    # Note: No docker cp/reload needed; nginx reads from volume-mounted directory

    - name: Fallback content if copy to release failed
      raw: |
        echo "❌ Copy failed, using fallback content"
        cat > "{{ deploy_dir }}/{{ release_date }}/index.html" << 'EOF'
        <!DOCTYPE html>
        <html>
          <head>
            <title>Demo Deploy Local</title>
          </head>
          <body>
            <h1>Hello World Local!</h1>
          </body>
        </html>
        EOF
        chmod 644 "{{ deploy_dir }}/{{ release_date }}/index.html"
      when: copy_result is failed

    - name: Update current symlink
      raw: |
        cd "{{ deploy_dir }}"
        rm -f current
        ln -sf "{{ release_date }}" current

    - name: Remove old releases, keep last {{ keep_releases }}
      shell: |
        cd {{ deploy_dir }}
        ls -dt 20* 2>/dev/null | tail -n +$(( {{ keep_releases }} + 1 )) | xargs rm -rf 2>/dev/null || true
      ignore_errors: yes

    # Display deployment success information
    - name: Display deployment success information
      debug:
        msg:
          - "✅ Local deployment successful!"
          - "📁 Deploy directory: {{ deploy_dir }}"
          - "📊 Release: {{ release_date }}"
          - "🔗 Current symlink: {{ deploy_dir }}/current"
          - "🌐 Web URL: http://localhost/jenkins/tanttws2/deploy/current/"
